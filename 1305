/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    static List<Integer> list2;
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        list2= new ArrayList<>();
        inorder(root1);
        
        List<Integer> list1 = new ArrayList<>();
       // Collections.copy(list1, list2);
        list1=list2;
        
        list2= new ArrayList<>();
        inorder(root2);
        
        List<Integer> list = new ArrayList<>();
        
        int i=0, j=0;
        while(i < list1.size() && j < list2.size()){
            int a= list1.get(i);
            int b= list2.get(j);
            
            if(a <= b){
                list.add(a);
                i++;
            }else{
                list.add(b);
                j++;
            }
        }
        
        while(i < list1.size()){
            list.add(list1.get(i));
            i++;
        }
        while(j < list2.size()){
            list.add(list2.get(j));
            j++;
        }
        
        return list;
        
    } 
    
    public static void inorder(TreeNode node){
        if(node==null){
            return;
        }
        inorder(node.left);
        list2.add(node.val);
        inorder(node.right);
        
        return;
    }
}
