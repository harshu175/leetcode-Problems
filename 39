class Solution {
    List<List<Integer>> list;
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        list = new ArrayList<>();
        if(candidates == null || candidates.length==0)return list;
        
        Arrays.sort(candidates);
        
        findCombination(candidates, target , 0 , new ArrayList<>());
        
        return list;
    }
    
    void findCombination(int[] candidates, int target, int startidx , ArrayList<Integer> combination){
        if(startidx >= candidates.length)return;
        if(target == 0){
            list.add(new ArrayList<>(combination));
            return;
        }
        
        for(int i = startidx; i< candidates.length; i++){
            if(candidates[i] > target)break;
            
            combination.add(candidates[i]);
            findCombination(candidates, target-candidates[i], i,combination);
            combination.remove(combination.size()-1);
        }
        return;
    }
}
